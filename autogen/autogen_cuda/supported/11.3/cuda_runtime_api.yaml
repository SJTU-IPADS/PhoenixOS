# Copyright 2024 The PhoenixOS Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

header_file_name: "cuda_runtime_api.h"
dependent_headers:
  - "cuda_runtime_api.h"
  - "cuda.h"
successful_retval: "cudaSuccess"
apis:
  # ​cudaError_t cudaMalloc ( void** devPtr, size_t size ) 
  - name: "cudaMalloc"
    parent_name: "cudaMalloc"
    type: "create_resource"
    customize_parser: false
    customize_worker: true
    is_sync: true
    # parser
    create_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "to_param"
        state_size_param_index: 2
        expected_addr_param_index: 0
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
    out_edges:
    inout_edges:
    # worker
    involve_membus: false
    need_stream_sync: false
    constant_params:

  # ​cudaError_t cudaFree ( void* devPtr ) 
  - name: "cudaFree"
    parent_name: "cudaFree"
    customize_parser: false
    customize_worker: true
    is_sync: true
    # parser
    type: "delete_resource"
    create_edges:
    delete_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
    out_edges:
    inout_edges:
    # worker
    involve_membus: false
    need_stream_sync: false
    constant_params:

  # ​cudaError_t cudaMemcpy ( void* dst, const void* src, size_t count, cudaMemcpyKind kind ) 
  - name: "cudaMemcpyHtod"
    parent_name: "cudaMemcpy"
    customize_parser: false
    customize_worker: false
    is_sync: true
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
      - index: 4
        value: "cudaMemcpyHostToDevice"

  # ​cudaError_t cudaMemcpy ( void* dst, const void* src, size_t count, cudaMemcpyKind kind ) 
  - name: "cudaMemcpyDtoh"
    parent_name: "cudaMemcpy"
    customize_parser: false
    customize_worker: false
    is_sync: true
    # parser
    type: "get_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
      - param_index: 2
        handle_type: "cuda_memory"
        handle_source: "from_param"
    out_edges:
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
      - index: 4
        value: "cudaMemcpyDeviceToHost"

  # ​cudaError_t cudaMemcpy ( void* dst, const void* src, size_t count, cudaMemcpyKind kind ) 
  - name: "cudaMemcpyDtod"
    parent_name: "cudaMemcpy"
    customize_parser: false
    customize_worker: false
    is_sync: true
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
      - param_index: 2
        handle_type: "cuda_memory"
        handle_source: "from_param"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
      - index: 4
        value: "cudaMemcpyDeviceToDevice"

  # ​cudaError_t cudaMemcpyAsync ( void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0 ) 
  - name: "cudaMemcpyAsyncHtod"
    parent_name: "cudaMemcpyAsync"
    customize_parser: false
    customize_worker: false
    is_sync: false
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 5
        handle_type: "cuda_stream"
        handle_source: "from_param"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
      - index: 4
        value: "cudaMemcpyHostToDevice"

  # ​cudaError_t cudaMemcpyAsync ( void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0 ) 
  - name: "cudaMemcpyAsyncDtoh"
    parent_name: "cudaMemcpyAsync"
    customize_parser: false
    customize_worker: false
    is_sync: true
    # parser
    type: "get_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 5
        handle_type: "cuda_stream"
        handle_source: "from_param"
      - param_index: 2
        handle_type: "cuda_memory"
        handle_source: "from_param"
    out_edges:
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: true
    constant_params:
      - index: 4
        value: "cudaMemcpyHostToDevice"

  # ​cudaError_t cudaMemcpyAsync ( void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0 )
  - name: "cudaMemcpyAsyncDtod"
    parent_name: "cudaMemcpyAsync"
    customize_parser: false
    customize_worker: false
    is_sync: false
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 5
        handle_type: "cuda_stream"
        handle_source: "from_param"
      - param_index: 2
        handle_type: "cuda_memory"
        handle_source: "from_param"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
      - index: 4
        value: "cudaMemcpyDeviceToDevice"

  # cudaError_t cudaMemset ( void* devPtr, int  value, size_t count )
  - name: "cudaMemset"
    parent_name: "cudaMemset"
    customize_parser: false
    customize_worker: false
    is_sync: true
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:

  # cudaError_t cudaMemsetAsync ( void* devPtr, int  value, size_t count, cudaStream_t stream = 0 )
  - name: "cudaMemsetAsync"
    parent_name: "cudaMemsetAsync"
    customize_parser: false
    customize_worker: false
    is_sync: false
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 4
        handle_type: "cuda_stream"
        handle_source: "from_param"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
