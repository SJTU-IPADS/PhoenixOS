# Copyright 2025 The PhoenixOS Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# CUDA: 11.3
# Type: Memory Management

header_file_name: "cuda_runtime_api.h"
dependent_headers:
  - "cuda_runtime_api.h"
  - "cuda.h"
successful_retval: "cudaSuccess"
apis:
  - name: "cudaArrayGetInfo"
    index: 250
    supported: false

  - name: "cudaArrayGetPlane"
    index: 251
    supported: false

  - name: "cudaArrayGetSparseProperties"
    index: 252
    supported: false

  # ​cudaError_t cudaFree ( void* devPtr ) 
  - name: "cudaFree"
    index: 253
    supported: true
    parent_name: "cudaFree"
    parser_type: "default"
    worker_type: "customized"
    is_sync: true
    # parser
    type: "delete_resource"
    create_edges:
    delete_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
    out_edges:
    inout_edges:
    # worker
    involve_membus: false
    need_stream_sync: false
    constant_params:

  - name: "cudaFreeArray"
    index: 254
    supported: false

  - name: "cudaFreeHost"
    index: 255
    supported: false

  - name: "cudaFreeMipmappedArray"
    index: 256
    supported: false

  - name: "cudaGetMipmappedArrayLevel"
    index: 257
    supported: false

  - name: "cudaGetSymbolAddress"
    index: 258
    supported: false

  - name: "cudaGetSymbolSize"
    index: 259
    supported: false

  - name: "cudaHostAlloc"
    index: 260
    supported: false

  - name: "cudaHostGetDevicePointer"
    index: 261
    supported: false

  - name: "cudaHostGetFlags"
    index: 262
    supported: false

  - name: "cudaHostRegister"
    index: 263
    supported: false

  - name: "cudaHostUnregister"
    index: 264
    supported: false

  # ​cudaError_t cudaMalloc ( void** devPtr, size_t size ) 
  - name: "cudaMalloc"
    index: 265
    supported: true
    parent_name: "cudaMalloc"
    type: "create_resource"
    parser_type: "default"
    worker_type: "customized"
    is_sync: true
    # parser
    create_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "to_param"
        state_size_param_index: 2
        expected_addr_param_index: 0
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_context"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
    out_edges:
    inout_edges:
    # worker
    involve_membus: false
    need_stream_sync: false
    constant_params:

  - name: "cudaMalloc3D"
    index: 266
    supported: false

  - name: "cudaMalloc3DArray"
    index: 267
    supported: false

  - name: "cudaMallocArray"
    index: 268
    supported: false

  - name: "cudaMallocHost"
    index: 269
    supported: false

  - name: "cudaMallocManaged"
    index: 270
    supported: false

  - name: "cudaMallocMipmappedArray"
    index: 271
    supported: false

  - name: "cudaMallocPitch"
    index: 272
    supported: false

  - name: "cudaMemAdvise"
    index: 273
    supported: false

  - name: "cudaMemGetInfo"
    index: 274
    supported: false

  - name: "cudaMemPrefetchAsync"
    index: 275
    supported: false

  - name: "cudaMemRangeGetAttribute"
    index: 276
    supported: false

  - name: "cudaMemRangeGetAttributes"
    index: 277
    supported: false

  # ​cudaError_t cudaMemcpy ( void* dst, const void* src, size_t count, cudaMemcpyKind kind ) 
  # please check cudaMemcpyHtod, cudaMemcpyDtoh, cudaMemcpyDtod
  - name: "cudaMemcpy"
    index: 278
    supported: false

  - name: "cudaMemcpy2D"
    index: 279
    supported: false

  - name: "cudaMemcpy2DArrayToArray"
    index: 280
    supported: false

  - name: "cudaMemcpy2DAsync"
    index: 281
    supported: false

  - name: "cudaMemcpy2DFromArray"
    index: 282
    supported: false

  - name: "cudaMemcpy2DFromArrayAsync"
    index: 283
    supported: false

  - name: "cudaMemcpy2DToArray"
    index: 284
    supported: false

  - name: "cudaMemcpy2DToArrayAsync"
    index: 285
    supported: false

  - name: "cudaMemcpy3D"
    index: 286
    supported: false

  - name: "cudaMemcpy3DAsync"
    index: 287
    supported: false

  - name: "cudaMemcpy3DPeer"
    index: 288
    supported: false

  - name: "cudaMemcpy3DPeerAsync"
    index: 289
    supported: false

  # ​cudaError_t cudaMemcpyAsync ( void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0 ) 
  # please check cudaMemcpyAsyncHtod, cudaMemcpyAsyncDtoh, cudaMemcpyAsyncDtod
  - name: "cudaMemcpyAsync"
    index: 290
    supported: false

  - name: "cudaMemcpyFromSymbol"
    index: 291
    supported: false

  - name: "cudaMemcpyFromSymbolAsync"
    index: 292
    supported: false

  - name: "cudaMemcpyPeer"
    index: 293
    supported: false

  - name: "cudaMemcpyPeerAsync"
    index: 294
    supported: false

  - name: "cudaMemcpyToSymbol"
    index: 295
    supported: false

  - name: "cudaMemcpyToSymbolAsync"
    index: 296
    supported: false

  - name: "cudaMemset"
    index: 297
    supported: true
    parent_name: "cudaMemset"
    parser_type: "default"
    worker_type: "default"
    is_sync: true
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:

  - name: "cudaMemset2D"
    index: 298
    supported: false

  - name: "cudaMemset2DAsync"
    index: 299
    supported: false

  - name: "cudaMemset3D"
    index: 300
    supported: false

  - name: "cudaMemset3DAsync"
    index: 301
    supported: false

  - name: "cudaMemsetAsync"
    index: 302
    supported: true
    parent_name: "cudaMemsetAsync"
    parser_type: "default"
    worker_type: "default"
    is_sync: false
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 4
        handle_type: "cuda_stream"
        handle_source: "from_param"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:

  - name: "cudaMipmappedArrayGetSparseProperties"
    index: 303
    supported: false

  - name: "make_cudaExtent"
    index: 304
    supported: false

  - name: "make_cudaPitchedPtr"
    index: 305
    supported: false

  - name: "make_cudaPos"
    index: 306
    supported: false

  # ​cudaError_t cudaMemcpy ( void* dst, const void* src, size_t count, cudaMemcpyKind kind ) 
  - name: "cudaMemcpyH2D"
    index: 320
    supported: true
    parent_name: "cudaMemcpy"
    parser_type: "default"
    worker_type: "default"
    is_sync: true
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
      - index: 4
        value: "cudaMemcpyHostToDevice"

  # ​cudaError_t cudaMemcpy ( void* dst, const void* src, size_t count, cudaMemcpyKind kind )
  - name: "cudaMemcpyD2H"
    index: 321
    supported: true
    parent_name: "cudaMemcpy"
    parser_type: "default"
    worker_type: "default"
    is_sync: true
    # parser
    type: "get_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
      - param_index: 2
        handle_type: "cuda_memory"
        handle_source: "from_param"
    out_edges:
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
      - index: 4
        value: "cudaMemcpyDeviceToHost"

  # ​cudaError_t cudaMemcpy ( void* dst, const void* src, size_t count, cudaMemcpyKind kind )
  - name: "cudaMemcpyD2D"
    index: 322
    supported: true
    parent_name: "cudaMemcpy"
    parser_type: "default"
    worker_type: "default"
    is_sync: true
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 0
        handle_type: "cuda_stream"
        handle_source: "from_default"
      - param_index: 2
        handle_type: "cuda_memory"
        handle_source: "from_param"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
      - index: 4
        value: "cudaMemcpyDeviceToDevice"

  # ​cudaError_t cudaMemcpyAsync ( void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0 )
  - name: "cudaMemcpyAsyncH2D"
    index: 323
    supported: true
    parent_name: "cudaMemcpyAsync"
    parser_type: "default"
    worker_type: "default"
    is_sync: false
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 5
        handle_type: "cuda_stream"
        handle_source: "from_param"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
      - index: 4
        value: "cudaMemcpyHostToDevice"

  # ​cudaError_t cudaMemcpyAsync ( void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0 )
  - name: "cudaMemcpyAsyncD2H"
    index: 324
    supported: true
    parent_name: "cudaMemcpyAsync"
    parser_type: "default"
    worker_type: "default"
    is_sync: true
    # parser
    type: "get_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 5
        handle_type: "cuda_stream"
        handle_source: "from_param"
      - param_index: 2
        handle_type: "cuda_memory"
        handle_source: "from_param"
    out_edges:
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: true
    constant_params:
      - index: 4
        value: "cudaMemcpyHostToDevice"

  # ​cudaError_t cudaMemcpyAsync ( void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0 )
  - name: "cudaMemcpyAsyncD2D"
    index: 325
    supported: true
    parent_name: "cudaMemcpyAsync"
    parser_type: "default"
    worker_type: "default"
    is_sync: false
    # parser
    type: "set_resource"
    create_edges:
    delete_edges:
    in_edges:
      - param_index: 0
        handle_type: "cuda_device"
        handle_source: "from_last_used"
      - param_index: 5
        handle_type: "cuda_stream"
        handle_source: "from_param"
      - param_index: 2
        handle_type: "cuda_memory"
        handle_source: "from_param"
    out_edges:
      - param_index: 1
        handle_type: "cuda_memory"
        handle_source: "from_param"
    inout_edges:
    # worker
    involve_membus: true
    need_stream_sync: false
    constant_params:
      - index: 4
        value: "cudaMemcpyDeviceToDevice"
